<% unless p('disable') %>
<%
    def db_host
      link('dbconn').if_p('database.host') do |host|
        return host
      end

      if_link('database') do |database_link|
        return database_link.instances[0].address
      end

      raise 'must provide dbconn link or database link'
    end

    def get_cc_url
      if_p('cc_hostname') do |cc_hostname|
        return "http://#{cc_hostname}:#{p('cc_port')}"
      end

      if_link('cloud_controller_https_endpoint') do |link|
        return "https://#{link.p('cc.internal_service_hostname')}:#{link.p('cc.public_tls.port')}"
      end

      raise '`cc_hostname` and `cc_port` properties were not supplied as manifest properties, nor were found in `cloud_controller_https_endpoint` link'
    end

    def asg_poll_interval_seconds
      interval = p('asg_poll_interval_seconds')
      if interval.class == Integer and interval >= 1
        return interval
      end

      raise 'asg_poll_interval_seconds must be an integer greater than 0'
    end

    def retry_deadline_seconds
      interval = p('retry_deadline_seconds')
      if interval.class == Integer and interval >= 1
        return interval
      end

      raise 'retry_deadline_seconds must be an integer greater than 0'
    end

    def locket_address
      if p('locket.address') =~ /^[a-z0-9.-]+:[0-9]+$/
        return p('locket.address')
      end

      raise 'the locket.address is invalid'
    end
%>

<%=
    require 'json'

    toRender = {
      'uuid' => spec.id,
      'database' => {
        'user' => link('dbconn').p('database.username'),
        'type' => link('dbconn').p('database.type'),
        'password' => link('dbconn').p('database.password'),
        'port' => link('dbconn').p('database.port'),
        'database_name' => link('dbconn').p('database.name'),
        'host' => db_host,
        'timeout' => p('database.connect_timeout_seconds'),
        'require_ssl' => link('dbconn').p('database.require_ssl'),
        'ca_cert' => '/var/vcap/jobs/policy-server-asg-syncer/config/certs/database_ca.crt',
        'skip_hostname_validation' => link('dbconn').p('database.skip_hostname_validation'),
      },
      'uaa_client' => p('uaa_client'),
      'uaa_client_secret' => p('uaa_client_secret'),
      'uaa_url' => "https://#{p('uaa_hostname')}",
      'uaa_port' => p('uaa_port'),
      'uaa_ca' => '/var/vcap/jobs/policy-server-asg-syncer/config/certs/uaa_ca.crt',
      'cc_url' => get_cc_url,
      'cc_ca_cert' => '/var/vcap/jobs/policy-server-asg-syncer/config/certs/cc_ca.crt',
      'log_prefix' => 'cfnetworking',
      'log_level' => p('log_level'),
      "metron_address" => "127.0.0.1:#{p("metron_port")}",
      'skip_ssl_validation' => p('skip_ssl_validation'),
      'asg_poll_interval_seconds' => asg_poll_interval_seconds,
      'retry_deadline_seconds' => retry_deadline_seconds,
      'locket_address' => locket_address,
      'locket_ca_cert_file' => '/var/vcap/jobs/policy-server-asg-syncer/config/certs/locket_ca.crt',
      'locket_client_cert_file' => '/var/vcap/jobs/policy-server-asg-syncer/config/certs/locket.crt',
      'locket_client_key_file' => '/var/vcap/jobs/policy-server-asg-syncer/config/certs/locket.key'
    }

    JSON.pretty_generate(toRender)
%>
<% end %>
