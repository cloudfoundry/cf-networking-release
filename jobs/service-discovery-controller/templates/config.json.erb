<%=

raise 'route_emitter_interval_seconds value must be greater than 0' if p('route_emitter_interval_seconds') <= 0

route_emitter_interval_seconds = p('route_emitter_interval_seconds')
staleness_threshold = p("staleness_threshold_seconds")
if staleness_threshold <= route_emitter_interval_seconds
  raise "'staleness_threshold_seconds' must be a value greater than 'route_emitter_interval_seconds' which is set to " + route_emitter_interval_seconds.to_s
end

config = {
    'address' => p('address'),
    'port' => "#{p('port')}",
    'index' => "#{spec.index}",
    'log_level_address' => "#{p('log_level_address')}",
    'log_level_port' => p('log_level_port'),
    'server_cert' => '/var/vcap/jobs/service-discovery-controller/config/certs/server.crt',
    'server_key' => '/var/vcap/jobs/service-discovery-controller/config/certs/server.key',
    'ca_cert' => '/var/vcap/jobs/service-discovery-controller/config/certs/client_ca.crt',
    'metron_port' => p('metron_port'),
    'staleness_threshold_seconds' => staleness_threshold,
    'pruning_interval_seconds' => route_emitter_interval_seconds,
    'metrics_emit_seconds' => 10,
    'resume_pruning_delay_seconds' => route_emitter_interval_seconds,
    'warm_duration_seconds' => route_emitter_interval_seconds
}

config['nats'] = {}
nats_link_name = 'nats'

if p('nats.tls_enabled')
  nats_link_name = 'nats-tls'

  config['nats']['tls_enabled'] = true
  config['nats']['ca_certs'] = '/var/vcap/jobs/service-discovery-controller/config/certs/nats_ca_certs.crt'
  config['nats']['cert_chain'] = '/var/vcap/jobs/service-discovery-controller/config/certs/nats_cert_chain.crt'
  config['nats']['private_key'] = '/var/vcap/jobs/service-discovery-controller/config/certs/nats_private_key.key'
end

if_p('nats.user') do |prop|
  config['nats']['user'] = prop
end.else do
  config['nats']['user'] = link(nats_link_name).p('nats.user', '')
end
if_p('nats.password') do |prop|
  config['nats']['pass'] = prop
end.else do
  config['nats']['pass'] = link(nats_link_name).p('nats.password', '')
end

nats_machines = nil
if_p('nats.machines') do |ips|
  nats_machines = ips.compact
end.else do
  link(nats_link_name).if_p("nats.hostname") do |hostname|
    nats_machines = [hostname]
  end.else do
    nats_machines = link(nats_link_name).instances.map { |instance| instance.address }
  end
end
nats_port = nil
if_p('nats.port') do |prop|
  nats_port = prop
end.else do
  nats_port = link(nats_link_name).p('nats.port')
end
config['nats']['hosts'] = nats_machines.map do |nats_machine|
  {'hostname' => nats_machine, 'port' => nats_port}
end

require 'json'
JSON.dump(config)
%>
