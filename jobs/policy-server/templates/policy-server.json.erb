<% unless p('disable') %>
<%
    def db_param_path(name)
      "database.#{name}"
    end

    def db_param(name)
      if_p(db_param_path name) do |param|
        return param
      end.else do
        return nil
      end
    end

    def require_db_param(name)
      param = db_param name
      return param if !param.nil?

      raise "#{db_param_path name} must be specified"
    end

    def db_host
      from_property = db_param 'host'
      return from_property if !from_property.nil?

      from_link = link("database").instances[0].address
      return from_link if !from_link.nil?

      raise "must provide database link or set #{db_param_path 'host'}"
    end

    def cleanup_interval_in_seconds
      minutes = p("policy_cleanup_interval")
      if minutes < 1
        raise "policy_cleanup_interval must be at least 1 minute"
      end
      minutes * 60
    end

    def tag_length
      length = p('tag_length')
      raise 'tag length must be greater than 0 and less than 4' unless [1,2,3].include?(length)
      length
    end

    def get_cc_url
      if_p('cc_hostname') do |cc_hostname|
        return "http://#{cc_hostname}:#{p('cc_port')}"
      end

      if_link("cloud_controller_https_endpoint") do |link|
        return "https://#{link.p('cc.internal_service_hostname')}:#{link.p('cc.public_tls.port')}"
      end

      raise '`cc_hostname` and `cc_port` properties were not supplied as manifest properties, nor were found in `cloud_controller_https_endpoint` link'
    end

    def asg_sync_interval
      # if p() is safe here since asg_sync_enabled + asg_sync_interval both have defaults and can't be nil
      if p('asg_sync_enabled')
        interval = p('asg_sync_interval')
        if interval.class == Integer and interval >= 1
          return interval
        end
          raise "asg_sync_interval must be an integer greater than 0"
      end
    end

    def locket_address
      # if p() is safe here since asg_sync_enabled + locket_address both have defaults and can't be nil
      if p('asg_sync_enabled')
        if p('locket_address') =~ /^[a-z0-9.-]+:[0-9]+$/
          return p('locket_address')
        end
        raise 'asg_sync_enabled is true but the locket_address is invalid'
      end
    end
%>

<%=
    require 'json'

    user = require_db_param 'username'
    password = require_db_param 'password'
    port = require_db_param 'port'
    name = require_db_param 'name'
    driver = require_db_param 'type'

    unless driver == 'mysql' || driver == 'postgres'
      raise "unknown driver #{driver}"
    end

    toRender = {
      'listen_host' => p('listen_ip'),
      'listen_port' => p('listen_port'),
      'log_prefix' => 'cfnetworking',
      'debug_server_host' => '127.0.0.1',
      'enable_tls' => p('enable_tls'),
      'ca_cert_file' => '/var/vcap/jobs/policy-server/config/certs/server_ca.crt',
      'server_cert_file' => '/var/vcap/jobs/policy-server/config/certs/server.crt',
      'server_key_file' => '/var/vcap/jobs/policy-server/config/certs/server.key',
      'debug_server_port' => p('debug_port'),
      'uaa_client' => p('uaa_client'),
      'uaa_client_secret' => p('uaa_client_secret'),
      'uaa_url' => "https://#{p('uaa_hostname')}",
      'uaa_port' => p('uaa_port'),
      'cc_url' => get_cc_url,
      'cc_ca_cert' => '/var/vcap/jobs/policy-server/config/certs/cc_ca.crt',
      'skip_ssl_validation' => p('skip_ssl_validation'),
      'database' => {
        'type' => driver,
        'user' => user,
        'password' => password,
        'host' => db_host,
        'port' => port,
        'timeout' => p('database.connect_timeout_seconds'),
        'database_name' => name,
        'require_ssl' => p('database.require_ssl'),
        'ca_cert' => '/var/vcap/jobs/policy-server/config/certs/database_ca.crt',
        'skip_hostname_validation' => p('database.skip_hostname_validation'),
      },
      'database_migration_timeout' => 600,
      'max_idle_connections' => p('max_idle_connections'),
      'max_open_connections' => p('max_open_connections'),
      'connections_max_lifetime_seconds' => p('connections_max_lifetime_seconds'),
      'tag_length' => tag_length,
      'metron_address' => "127.0.0.1:#{p('metron_port')}",
      'log_level' => p('log_level'),
      'cleanup_interval' => cleanup_interval_in_seconds,
      'max_policies' => p('max_policies_per_app_source'),
      'enable_space_developer_self_service' => p('enable_space_developer_self_service'),
      'allowed_cors_domains' => p('allowed_cors_domains'),

      # hard-coded values, not exposed as bosh spec properties
      'uaa_ca' => '/var/vcap/jobs/policy-server/config/certs/uaa_ca.crt',
      'request_timeout' => 5,
    }

    if p('asg_sync_enabled')
      toRender['asg_sync_interval'] = asg_sync_interval
      toRender['locket_address'] = locket_address
      toRender['locket_ca_cert_file'] = '/var/vcap/jobs/policy-server/config/certs/locket_ca.crt'
      toRender['locket_client_cert_file'] = '/var/vcap/jobs/policy-server/config/certs/locket.crt'
      toRender['locket_client_key_file'] = '/var/vcap/jobs/policy-server/config/certs/locket.key'
    end

    JSON.pretty_generate(toRender)
%>
<% end %>
