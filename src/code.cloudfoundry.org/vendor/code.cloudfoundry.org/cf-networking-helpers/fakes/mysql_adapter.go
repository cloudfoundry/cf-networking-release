// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"crypto/tls"
	"sync"

	"github.com/go-sql-driver/mysql"
)

type MySQLAdapter struct {
	ParseDSNStub        func(dsn string) (cfg *mysql.Config, err error)
	parseDSNMutex       sync.RWMutex
	parseDSNArgsForCall []struct {
		dsn string
	}
	parseDSNReturns struct {
		result1 *mysql.Config
		result2 error
	}
	parseDSNReturnsOnCall map[int]struct {
		result1 *mysql.Config
		result2 error
	}
	RegisterTLSConfigStub        func(key string, config *tls.Config) error
	registerTLSConfigMutex       sync.RWMutex
	registerTLSConfigArgsForCall []struct {
		key    string
		config *tls.Config
	}
	registerTLSConfigReturns struct {
		result1 error
	}
	registerTLSConfigReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MySQLAdapter) ParseDSN(dsn string) (cfg *mysql.Config, err error) {
	fake.parseDSNMutex.Lock()
	ret, specificReturn := fake.parseDSNReturnsOnCall[len(fake.parseDSNArgsForCall)]
	fake.parseDSNArgsForCall = append(fake.parseDSNArgsForCall, struct {
		dsn string
	}{dsn})
	fake.recordInvocation("ParseDSN", []interface{}{dsn})
	fake.parseDSNMutex.Unlock()
	if fake.ParseDSNStub != nil {
		return fake.ParseDSNStub(dsn)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.parseDSNReturns.result1, fake.parseDSNReturns.result2
}

func (fake *MySQLAdapter) ParseDSNCallCount() int {
	fake.parseDSNMutex.RLock()
	defer fake.parseDSNMutex.RUnlock()
	return len(fake.parseDSNArgsForCall)
}

func (fake *MySQLAdapter) ParseDSNArgsForCall(i int) string {
	fake.parseDSNMutex.RLock()
	defer fake.parseDSNMutex.RUnlock()
	return fake.parseDSNArgsForCall[i].dsn
}

func (fake *MySQLAdapter) ParseDSNReturns(result1 *mysql.Config, result2 error) {
	fake.ParseDSNStub = nil
	fake.parseDSNReturns = struct {
		result1 *mysql.Config
		result2 error
	}{result1, result2}
}

func (fake *MySQLAdapter) ParseDSNReturnsOnCall(i int, result1 *mysql.Config, result2 error) {
	fake.ParseDSNStub = nil
	if fake.parseDSNReturnsOnCall == nil {
		fake.parseDSNReturnsOnCall = make(map[int]struct {
			result1 *mysql.Config
			result2 error
		})
	}
	fake.parseDSNReturnsOnCall[i] = struct {
		result1 *mysql.Config
		result2 error
	}{result1, result2}
}

func (fake *MySQLAdapter) RegisterTLSConfig(key string, config *tls.Config) error {
	fake.registerTLSConfigMutex.Lock()
	ret, specificReturn := fake.registerTLSConfigReturnsOnCall[len(fake.registerTLSConfigArgsForCall)]
	fake.registerTLSConfigArgsForCall = append(fake.registerTLSConfigArgsForCall, struct {
		key    string
		config *tls.Config
	}{key, config})
	fake.recordInvocation("RegisterTLSConfig", []interface{}{key, config})
	fake.registerTLSConfigMutex.Unlock()
	if fake.RegisterTLSConfigStub != nil {
		return fake.RegisterTLSConfigStub(key, config)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.registerTLSConfigReturns.result1
}

func (fake *MySQLAdapter) RegisterTLSConfigCallCount() int {
	fake.registerTLSConfigMutex.RLock()
	defer fake.registerTLSConfigMutex.RUnlock()
	return len(fake.registerTLSConfigArgsForCall)
}

func (fake *MySQLAdapter) RegisterTLSConfigArgsForCall(i int) (string, *tls.Config) {
	fake.registerTLSConfigMutex.RLock()
	defer fake.registerTLSConfigMutex.RUnlock()
	return fake.registerTLSConfigArgsForCall[i].key, fake.registerTLSConfigArgsForCall[i].config
}

func (fake *MySQLAdapter) RegisterTLSConfigReturns(result1 error) {
	fake.RegisterTLSConfigStub = nil
	fake.registerTLSConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *MySQLAdapter) RegisterTLSConfigReturnsOnCall(i int, result1 error) {
	fake.RegisterTLSConfigStub = nil
	if fake.registerTLSConfigReturnsOnCall == nil {
		fake.registerTLSConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerTLSConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MySQLAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseDSNMutex.RLock()
	defer fake.parseDSNMutex.RUnlock()
	fake.registerTLSConfigMutex.RLock()
	defer fake.registerTLSConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MySQLAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
