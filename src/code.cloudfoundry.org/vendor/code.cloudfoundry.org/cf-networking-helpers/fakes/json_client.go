// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/cf-networking-helpers/json_client"
)

type JSONClient struct {
	DoStub        func(method, route string, reqData, respData interface{}, token string) error
	doMutex       sync.RWMutex
	doArgsForCall []struct {
		method   string
		route    string
		reqData  interface{}
		respData interface{}
		token    string
	}
	doReturns struct {
		result1 error
	}
	doReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *JSONClient) Do(method string, route string, reqData interface{}, respData interface{}, token string) error {
	fake.doMutex.Lock()
	ret, specificReturn := fake.doReturnsOnCall[len(fake.doArgsForCall)]
	fake.doArgsForCall = append(fake.doArgsForCall, struct {
		method   string
		route    string
		reqData  interface{}
		respData interface{}
		token    string
	}{method, route, reqData, respData, token})
	fake.recordInvocation("Do", []interface{}{method, route, reqData, respData, token})
	fake.doMutex.Unlock()
	if fake.DoStub != nil {
		return fake.DoStub(method, route, reqData, respData, token)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.doReturns.result1
}

func (fake *JSONClient) DoCallCount() int {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return len(fake.doArgsForCall)
}

func (fake *JSONClient) DoArgsForCall(i int) (string, string, interface{}, interface{}, string) {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return fake.doArgsForCall[i].method, fake.doArgsForCall[i].route, fake.doArgsForCall[i].reqData, fake.doArgsForCall[i].respData, fake.doArgsForCall[i].token
}

func (fake *JSONClient) DoReturns(result1 error) {
	fake.DoStub = nil
	fake.doReturns = struct {
		result1 error
	}{result1}
}

func (fake *JSONClient) DoReturnsOnCall(i int, result1 error) {
	fake.DoStub = nil
	if fake.doReturnsOnCall == nil {
		fake.doReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.doReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *JSONClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *JSONClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ json_client.JsonClient = new(JSONClient)
