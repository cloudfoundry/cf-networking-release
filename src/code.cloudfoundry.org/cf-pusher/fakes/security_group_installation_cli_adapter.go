// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type SecurityGroupInstallationCLIAdapter struct {
	BindSecurityGroupStub        func(string, string, string) error
	bindSecurityGroupMutex       sync.RWMutex
	bindSecurityGroupArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	bindSecurityGroupReturns struct {
		result1 error
	}
	bindSecurityGroupReturnsOnCall map[int]struct {
		result1 error
	}
	CreateSecurityGroupStub        func(string, string) error
	createSecurityGroupMutex       sync.RWMutex
	createSecurityGroupArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createSecurityGroupReturns struct {
		result1 error
	}
	createSecurityGroupReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteSecurityGroupStub        func(string) error
	deleteSecurityGroupMutex       sync.RWMutex
	deleteSecurityGroupArgsForCall []struct {
		arg1 string
	}
	deleteSecurityGroupReturns struct {
		result1 error
	}
	deleteSecurityGroupReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SecurityGroupInstallationCLIAdapter) BindSecurityGroup(arg1 string, arg2 string, arg3 string) error {
	fake.bindSecurityGroupMutex.Lock()
	ret, specificReturn := fake.bindSecurityGroupReturnsOnCall[len(fake.bindSecurityGroupArgsForCall)]
	fake.bindSecurityGroupArgsForCall = append(fake.bindSecurityGroupArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.BindSecurityGroupStub
	fakeReturns := fake.bindSecurityGroupReturns
	fake.recordInvocation("BindSecurityGroup", []interface{}{arg1, arg2, arg3})
	fake.bindSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SecurityGroupInstallationCLIAdapter) BindSecurityGroupCallCount() int {
	fake.bindSecurityGroupMutex.RLock()
	defer fake.bindSecurityGroupMutex.RUnlock()
	return len(fake.bindSecurityGroupArgsForCall)
}

func (fake *SecurityGroupInstallationCLIAdapter) BindSecurityGroupCalls(stub func(string, string, string) error) {
	fake.bindSecurityGroupMutex.Lock()
	defer fake.bindSecurityGroupMutex.Unlock()
	fake.BindSecurityGroupStub = stub
}

func (fake *SecurityGroupInstallationCLIAdapter) BindSecurityGroupArgsForCall(i int) (string, string, string) {
	fake.bindSecurityGroupMutex.RLock()
	defer fake.bindSecurityGroupMutex.RUnlock()
	argsForCall := fake.bindSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *SecurityGroupInstallationCLIAdapter) BindSecurityGroupReturns(result1 error) {
	fake.bindSecurityGroupMutex.Lock()
	defer fake.bindSecurityGroupMutex.Unlock()
	fake.BindSecurityGroupStub = nil
	fake.bindSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *SecurityGroupInstallationCLIAdapter) BindSecurityGroupReturnsOnCall(i int, result1 error) {
	fake.bindSecurityGroupMutex.Lock()
	defer fake.bindSecurityGroupMutex.Unlock()
	fake.BindSecurityGroupStub = nil
	if fake.bindSecurityGroupReturnsOnCall == nil {
		fake.bindSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindSecurityGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SecurityGroupInstallationCLIAdapter) CreateSecurityGroup(arg1 string, arg2 string) error {
	fake.createSecurityGroupMutex.Lock()
	ret, specificReturn := fake.createSecurityGroupReturnsOnCall[len(fake.createSecurityGroupArgsForCall)]
	fake.createSecurityGroupArgsForCall = append(fake.createSecurityGroupArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CreateSecurityGroupStub
	fakeReturns := fake.createSecurityGroupReturns
	fake.recordInvocation("CreateSecurityGroup", []interface{}{arg1, arg2})
	fake.createSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SecurityGroupInstallationCLIAdapter) CreateSecurityGroupCallCount() int {
	fake.createSecurityGroupMutex.RLock()
	defer fake.createSecurityGroupMutex.RUnlock()
	return len(fake.createSecurityGroupArgsForCall)
}

func (fake *SecurityGroupInstallationCLIAdapter) CreateSecurityGroupCalls(stub func(string, string) error) {
	fake.createSecurityGroupMutex.Lock()
	defer fake.createSecurityGroupMutex.Unlock()
	fake.CreateSecurityGroupStub = stub
}

func (fake *SecurityGroupInstallationCLIAdapter) CreateSecurityGroupArgsForCall(i int) (string, string) {
	fake.createSecurityGroupMutex.RLock()
	defer fake.createSecurityGroupMutex.RUnlock()
	argsForCall := fake.createSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *SecurityGroupInstallationCLIAdapter) CreateSecurityGroupReturns(result1 error) {
	fake.createSecurityGroupMutex.Lock()
	defer fake.createSecurityGroupMutex.Unlock()
	fake.CreateSecurityGroupStub = nil
	fake.createSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *SecurityGroupInstallationCLIAdapter) CreateSecurityGroupReturnsOnCall(i int, result1 error) {
	fake.createSecurityGroupMutex.Lock()
	defer fake.createSecurityGroupMutex.Unlock()
	fake.CreateSecurityGroupStub = nil
	if fake.createSecurityGroupReturnsOnCall == nil {
		fake.createSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createSecurityGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SecurityGroupInstallationCLIAdapter) DeleteSecurityGroup(arg1 string) error {
	fake.deleteSecurityGroupMutex.Lock()
	ret, specificReturn := fake.deleteSecurityGroupReturnsOnCall[len(fake.deleteSecurityGroupArgsForCall)]
	fake.deleteSecurityGroupArgsForCall = append(fake.deleteSecurityGroupArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteSecurityGroupStub
	fakeReturns := fake.deleteSecurityGroupReturns
	fake.recordInvocation("DeleteSecurityGroup", []interface{}{arg1})
	fake.deleteSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SecurityGroupInstallationCLIAdapter) DeleteSecurityGroupCallCount() int {
	fake.deleteSecurityGroupMutex.RLock()
	defer fake.deleteSecurityGroupMutex.RUnlock()
	return len(fake.deleteSecurityGroupArgsForCall)
}

func (fake *SecurityGroupInstallationCLIAdapter) DeleteSecurityGroupCalls(stub func(string) error) {
	fake.deleteSecurityGroupMutex.Lock()
	defer fake.deleteSecurityGroupMutex.Unlock()
	fake.DeleteSecurityGroupStub = stub
}

func (fake *SecurityGroupInstallationCLIAdapter) DeleteSecurityGroupArgsForCall(i int) string {
	fake.deleteSecurityGroupMutex.RLock()
	defer fake.deleteSecurityGroupMutex.RUnlock()
	argsForCall := fake.deleteSecurityGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SecurityGroupInstallationCLIAdapter) DeleteSecurityGroupReturns(result1 error) {
	fake.deleteSecurityGroupMutex.Lock()
	defer fake.deleteSecurityGroupMutex.Unlock()
	fake.DeleteSecurityGroupStub = nil
	fake.deleteSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *SecurityGroupInstallationCLIAdapter) DeleteSecurityGroupReturnsOnCall(i int, result1 error) {
	fake.deleteSecurityGroupMutex.Lock()
	defer fake.deleteSecurityGroupMutex.Unlock()
	fake.DeleteSecurityGroupStub = nil
	if fake.deleteSecurityGroupReturnsOnCall == nil {
		fake.deleteSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSecurityGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SecurityGroupInstallationCLIAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bindSecurityGroupMutex.RLock()
	defer fake.bindSecurityGroupMutex.RUnlock()
	fake.createSecurityGroupMutex.RLock()
	defer fake.createSecurityGroupMutex.RUnlock()
	fake.deleteSecurityGroupMutex.RLock()
	defer fake.deleteSecurityGroupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SecurityGroupInstallationCLIAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
