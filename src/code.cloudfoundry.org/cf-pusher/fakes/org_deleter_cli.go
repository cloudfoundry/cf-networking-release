// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type OrgDeleterCli struct {
	DeleteOrgStub        func(string) error
	deleteOrgMutex       sync.RWMutex
	deleteOrgArgsForCall []struct {
		arg1 string
	}
	deleteOrgReturns struct {
		result1 error
	}
	deleteOrgReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteQuotaStub        func(string) error
	deleteQuotaMutex       sync.RWMutex
	deleteQuotaArgsForCall []struct {
		arg1 string
	}
	deleteQuotaReturns struct {
		result1 error
	}
	deleteQuotaReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *OrgDeleterCli) DeleteOrg(arg1 string) error {
	fake.deleteOrgMutex.Lock()
	ret, specificReturn := fake.deleteOrgReturnsOnCall[len(fake.deleteOrgArgsForCall)]
	fake.deleteOrgArgsForCall = append(fake.deleteOrgArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteOrgStub
	fakeReturns := fake.deleteOrgReturns
	fake.recordInvocation("DeleteOrg", []interface{}{arg1})
	fake.deleteOrgMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgDeleterCli) DeleteOrgCallCount() int {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	return len(fake.deleteOrgArgsForCall)
}

func (fake *OrgDeleterCli) DeleteOrgCalls(stub func(string) error) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = stub
}

func (fake *OrgDeleterCli) DeleteOrgArgsForCall(i int) string {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	argsForCall := fake.deleteOrgArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OrgDeleterCli) DeleteOrgReturns(result1 error) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = nil
	fake.deleteOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *OrgDeleterCli) DeleteOrgReturnsOnCall(i int, result1 error) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = nil
	if fake.deleteOrgReturnsOnCall == nil {
		fake.deleteOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *OrgDeleterCli) DeleteQuota(arg1 string) error {
	fake.deleteQuotaMutex.Lock()
	ret, specificReturn := fake.deleteQuotaReturnsOnCall[len(fake.deleteQuotaArgsForCall)]
	fake.deleteQuotaArgsForCall = append(fake.deleteQuotaArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteQuotaStub
	fakeReturns := fake.deleteQuotaReturns
	fake.recordInvocation("DeleteQuota", []interface{}{arg1})
	fake.deleteQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OrgDeleterCli) DeleteQuotaCallCount() int {
	fake.deleteQuotaMutex.RLock()
	defer fake.deleteQuotaMutex.RUnlock()
	return len(fake.deleteQuotaArgsForCall)
}

func (fake *OrgDeleterCli) DeleteQuotaCalls(stub func(string) error) {
	fake.deleteQuotaMutex.Lock()
	defer fake.deleteQuotaMutex.Unlock()
	fake.DeleteQuotaStub = stub
}

func (fake *OrgDeleterCli) DeleteQuotaArgsForCall(i int) string {
	fake.deleteQuotaMutex.RLock()
	defer fake.deleteQuotaMutex.RUnlock()
	argsForCall := fake.deleteQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OrgDeleterCli) DeleteQuotaReturns(result1 error) {
	fake.deleteQuotaMutex.Lock()
	defer fake.deleteQuotaMutex.Unlock()
	fake.DeleteQuotaStub = nil
	fake.deleteQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *OrgDeleterCli) DeleteQuotaReturnsOnCall(i int, result1 error) {
	fake.deleteQuotaMutex.Lock()
	defer fake.deleteQuotaMutex.Unlock()
	fake.DeleteQuotaStub = nil
	if fake.deleteQuotaReturnsOnCall == nil {
		fake.deleteQuotaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteQuotaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *OrgDeleterCli) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	fake.deleteQuotaMutex.RLock()
	defer fake.deleteQuotaMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OrgDeleterCli) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
