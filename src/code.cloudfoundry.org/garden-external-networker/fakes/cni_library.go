// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/containernetworking/cni/libcni"
	"github.com/containernetworking/cni/pkg/types"
)

type CNILibrary struct {
	AddNetworkStub        func(*libcni.NetworkConfig, *libcni.RuntimeConf) (types.Result, error)
	addNetworkMutex       sync.RWMutex
	addNetworkArgsForCall []struct {
		arg1 *libcni.NetworkConfig
		arg2 *libcni.RuntimeConf
	}
	addNetworkReturns struct {
		result1 types.Result
		result2 error
	}
	addNetworkReturnsOnCall map[int]struct {
		result1 types.Result
		result2 error
	}
	AddNetworkListStub        func(*libcni.NetworkConfigList, *libcni.RuntimeConf) (types.Result, error)
	addNetworkListMutex       sync.RWMutex
	addNetworkListArgsForCall []struct {
		arg1 *libcni.NetworkConfigList
		arg2 *libcni.RuntimeConf
	}
	addNetworkListReturns struct {
		result1 types.Result
		result2 error
	}
	addNetworkListReturnsOnCall map[int]struct {
		result1 types.Result
		result2 error
	}
	DelNetworkStub        func(*libcni.NetworkConfig, *libcni.RuntimeConf) error
	delNetworkMutex       sync.RWMutex
	delNetworkArgsForCall []struct {
		arg1 *libcni.NetworkConfig
		arg2 *libcni.RuntimeConf
	}
	delNetworkReturns struct {
		result1 error
	}
	delNetworkReturnsOnCall map[int]struct {
		result1 error
	}
	DelNetworkListStub        func(*libcni.NetworkConfigList, *libcni.RuntimeConf) error
	delNetworkListMutex       sync.RWMutex
	delNetworkListArgsForCall []struct {
		arg1 *libcni.NetworkConfigList
		arg2 *libcni.RuntimeConf
	}
	delNetworkListReturns struct {
		result1 error
	}
	delNetworkListReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CNILibrary) AddNetwork(arg1 *libcni.NetworkConfig, arg2 *libcni.RuntimeConf) (types.Result, error) {
	fake.addNetworkMutex.Lock()
	ret, specificReturn := fake.addNetworkReturnsOnCall[len(fake.addNetworkArgsForCall)]
	fake.addNetworkArgsForCall = append(fake.addNetworkArgsForCall, struct {
		arg1 *libcni.NetworkConfig
		arg2 *libcni.RuntimeConf
	}{arg1, arg2})
	stub := fake.AddNetworkStub
	fakeReturns := fake.addNetworkReturns
	fake.recordInvocation("AddNetwork", []interface{}{arg1, arg2})
	fake.addNetworkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CNILibrary) AddNetworkCallCount() int {
	fake.addNetworkMutex.RLock()
	defer fake.addNetworkMutex.RUnlock()
	return len(fake.addNetworkArgsForCall)
}

func (fake *CNILibrary) AddNetworkCalls(stub func(*libcni.NetworkConfig, *libcni.RuntimeConf) (types.Result, error)) {
	fake.addNetworkMutex.Lock()
	defer fake.addNetworkMutex.Unlock()
	fake.AddNetworkStub = stub
}

func (fake *CNILibrary) AddNetworkArgsForCall(i int) (*libcni.NetworkConfig, *libcni.RuntimeConf) {
	fake.addNetworkMutex.RLock()
	defer fake.addNetworkMutex.RUnlock()
	argsForCall := fake.addNetworkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CNILibrary) AddNetworkReturns(result1 types.Result, result2 error) {
	fake.addNetworkMutex.Lock()
	defer fake.addNetworkMutex.Unlock()
	fake.AddNetworkStub = nil
	fake.addNetworkReturns = struct {
		result1 types.Result
		result2 error
	}{result1, result2}
}

func (fake *CNILibrary) AddNetworkReturnsOnCall(i int, result1 types.Result, result2 error) {
	fake.addNetworkMutex.Lock()
	defer fake.addNetworkMutex.Unlock()
	fake.AddNetworkStub = nil
	if fake.addNetworkReturnsOnCall == nil {
		fake.addNetworkReturnsOnCall = make(map[int]struct {
			result1 types.Result
			result2 error
		})
	}
	fake.addNetworkReturnsOnCall[i] = struct {
		result1 types.Result
		result2 error
	}{result1, result2}
}

func (fake *CNILibrary) AddNetworkList(arg1 *libcni.NetworkConfigList, arg2 *libcni.RuntimeConf) (types.Result, error) {
	fake.addNetworkListMutex.Lock()
	ret, specificReturn := fake.addNetworkListReturnsOnCall[len(fake.addNetworkListArgsForCall)]
	fake.addNetworkListArgsForCall = append(fake.addNetworkListArgsForCall, struct {
		arg1 *libcni.NetworkConfigList
		arg2 *libcni.RuntimeConf
	}{arg1, arg2})
	stub := fake.AddNetworkListStub
	fakeReturns := fake.addNetworkListReturns
	fake.recordInvocation("AddNetworkList", []interface{}{arg1, arg2})
	fake.addNetworkListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CNILibrary) AddNetworkListCallCount() int {
	fake.addNetworkListMutex.RLock()
	defer fake.addNetworkListMutex.RUnlock()
	return len(fake.addNetworkListArgsForCall)
}

func (fake *CNILibrary) AddNetworkListCalls(stub func(*libcni.NetworkConfigList, *libcni.RuntimeConf) (types.Result, error)) {
	fake.addNetworkListMutex.Lock()
	defer fake.addNetworkListMutex.Unlock()
	fake.AddNetworkListStub = stub
}

func (fake *CNILibrary) AddNetworkListArgsForCall(i int) (*libcni.NetworkConfigList, *libcni.RuntimeConf) {
	fake.addNetworkListMutex.RLock()
	defer fake.addNetworkListMutex.RUnlock()
	argsForCall := fake.addNetworkListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CNILibrary) AddNetworkListReturns(result1 types.Result, result2 error) {
	fake.addNetworkListMutex.Lock()
	defer fake.addNetworkListMutex.Unlock()
	fake.AddNetworkListStub = nil
	fake.addNetworkListReturns = struct {
		result1 types.Result
		result2 error
	}{result1, result2}
}

func (fake *CNILibrary) AddNetworkListReturnsOnCall(i int, result1 types.Result, result2 error) {
	fake.addNetworkListMutex.Lock()
	defer fake.addNetworkListMutex.Unlock()
	fake.AddNetworkListStub = nil
	if fake.addNetworkListReturnsOnCall == nil {
		fake.addNetworkListReturnsOnCall = make(map[int]struct {
			result1 types.Result
			result2 error
		})
	}
	fake.addNetworkListReturnsOnCall[i] = struct {
		result1 types.Result
		result2 error
	}{result1, result2}
}

func (fake *CNILibrary) DelNetwork(arg1 *libcni.NetworkConfig, arg2 *libcni.RuntimeConf) error {
	fake.delNetworkMutex.Lock()
	ret, specificReturn := fake.delNetworkReturnsOnCall[len(fake.delNetworkArgsForCall)]
	fake.delNetworkArgsForCall = append(fake.delNetworkArgsForCall, struct {
		arg1 *libcni.NetworkConfig
		arg2 *libcni.RuntimeConf
	}{arg1, arg2})
	stub := fake.DelNetworkStub
	fakeReturns := fake.delNetworkReturns
	fake.recordInvocation("DelNetwork", []interface{}{arg1, arg2})
	fake.delNetworkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *CNILibrary) DelNetworkCallCount() int {
	fake.delNetworkMutex.RLock()
	defer fake.delNetworkMutex.RUnlock()
	return len(fake.delNetworkArgsForCall)
}

func (fake *CNILibrary) DelNetworkCalls(stub func(*libcni.NetworkConfig, *libcni.RuntimeConf) error) {
	fake.delNetworkMutex.Lock()
	defer fake.delNetworkMutex.Unlock()
	fake.DelNetworkStub = stub
}

func (fake *CNILibrary) DelNetworkArgsForCall(i int) (*libcni.NetworkConfig, *libcni.RuntimeConf) {
	fake.delNetworkMutex.RLock()
	defer fake.delNetworkMutex.RUnlock()
	argsForCall := fake.delNetworkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CNILibrary) DelNetworkReturns(result1 error) {
	fake.delNetworkMutex.Lock()
	defer fake.delNetworkMutex.Unlock()
	fake.DelNetworkStub = nil
	fake.delNetworkReturns = struct {
		result1 error
	}{result1}
}

func (fake *CNILibrary) DelNetworkReturnsOnCall(i int, result1 error) {
	fake.delNetworkMutex.Lock()
	defer fake.delNetworkMutex.Unlock()
	fake.DelNetworkStub = nil
	if fake.delNetworkReturnsOnCall == nil {
		fake.delNetworkReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.delNetworkReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CNILibrary) DelNetworkList(arg1 *libcni.NetworkConfigList, arg2 *libcni.RuntimeConf) error {
	fake.delNetworkListMutex.Lock()
	ret, specificReturn := fake.delNetworkListReturnsOnCall[len(fake.delNetworkListArgsForCall)]
	fake.delNetworkListArgsForCall = append(fake.delNetworkListArgsForCall, struct {
		arg1 *libcni.NetworkConfigList
		arg2 *libcni.RuntimeConf
	}{arg1, arg2})
	stub := fake.DelNetworkListStub
	fakeReturns := fake.delNetworkListReturns
	fake.recordInvocation("DelNetworkList", []interface{}{arg1, arg2})
	fake.delNetworkListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *CNILibrary) DelNetworkListCallCount() int {
	fake.delNetworkListMutex.RLock()
	defer fake.delNetworkListMutex.RUnlock()
	return len(fake.delNetworkListArgsForCall)
}

func (fake *CNILibrary) DelNetworkListCalls(stub func(*libcni.NetworkConfigList, *libcni.RuntimeConf) error) {
	fake.delNetworkListMutex.Lock()
	defer fake.delNetworkListMutex.Unlock()
	fake.DelNetworkListStub = stub
}

func (fake *CNILibrary) DelNetworkListArgsForCall(i int) (*libcni.NetworkConfigList, *libcni.RuntimeConf) {
	fake.delNetworkListMutex.RLock()
	defer fake.delNetworkListMutex.RUnlock()
	argsForCall := fake.delNetworkListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CNILibrary) DelNetworkListReturns(result1 error) {
	fake.delNetworkListMutex.Lock()
	defer fake.delNetworkListMutex.Unlock()
	fake.DelNetworkListStub = nil
	fake.delNetworkListReturns = struct {
		result1 error
	}{result1}
}

func (fake *CNILibrary) DelNetworkListReturnsOnCall(i int, result1 error) {
	fake.delNetworkListMutex.Lock()
	defer fake.delNetworkListMutex.Unlock()
	fake.DelNetworkListStub = nil
	if fake.delNetworkListReturnsOnCall == nil {
		fake.delNetworkListReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.delNetworkListReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CNILibrary) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addNetworkMutex.RLock()
	defer fake.addNetworkMutex.RUnlock()
	fake.addNetworkListMutex.RLock()
	defer fake.addNetworkListMutex.RUnlock()
	fake.delNetworkMutex.RLock()
	defer fake.delNetworkMutex.RUnlock()
	fake.delNetworkListMutex.RLock()
	defer fake.delNetworkListMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CNILibrary) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
