// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/policy-server/store"
)

type SecurityGroupsStore struct {
	ReplaceStub        func([]store.SecurityGroup) error
	replaceMutex       sync.RWMutex
	replaceArgsForCall []struct {
		arg1 []store.SecurityGroup
	}
	replaceReturns struct {
		result1 error
	}
	replaceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SecurityGroupsStore) Replace(arg1 []store.SecurityGroup) error {
	var arg1Copy []store.SecurityGroup
	if arg1 != nil {
		arg1Copy = make([]store.SecurityGroup, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.replaceMutex.Lock()
	ret, specificReturn := fake.replaceReturnsOnCall[len(fake.replaceArgsForCall)]
	fake.replaceArgsForCall = append(fake.replaceArgsForCall, struct {
		arg1 []store.SecurityGroup
	}{arg1Copy})
	stub := fake.ReplaceStub
	fakeReturns := fake.replaceReturns
	fake.recordInvocation("Replace", []interface{}{arg1Copy})
	fake.replaceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SecurityGroupsStore) ReplaceCallCount() int {
	fake.replaceMutex.RLock()
	defer fake.replaceMutex.RUnlock()
	return len(fake.replaceArgsForCall)
}

func (fake *SecurityGroupsStore) ReplaceCalls(stub func([]store.SecurityGroup) error) {
	fake.replaceMutex.Lock()
	defer fake.replaceMutex.Unlock()
	fake.ReplaceStub = stub
}

func (fake *SecurityGroupsStore) ReplaceArgsForCall(i int) []store.SecurityGroup {
	fake.replaceMutex.RLock()
	defer fake.replaceMutex.RUnlock()
	argsForCall := fake.replaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SecurityGroupsStore) ReplaceReturns(result1 error) {
	fake.replaceMutex.Lock()
	defer fake.replaceMutex.Unlock()
	fake.ReplaceStub = nil
	fake.replaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *SecurityGroupsStore) ReplaceReturnsOnCall(i int, result1 error) {
	fake.replaceMutex.Lock()
	defer fake.replaceMutex.Unlock()
	fake.ReplaceStub = nil
	if fake.replaceReturnsOnCall == nil {
		fake.replaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.replaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SecurityGroupsStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.replaceMutex.RLock()
	defer fake.replaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SecurityGroupsStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.SecurityGroupsStore = new(SecurityGroupsStore)
