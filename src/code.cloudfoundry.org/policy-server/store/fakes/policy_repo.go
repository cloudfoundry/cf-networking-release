// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/cf-networking-helpers/db"
	"code.cloudfoundry.org/policy-server/store"
)

type PolicyRepo struct {
	CountWhereDestinationIDStub        func(db.Transaction, int) (int, error)
	countWhereDestinationIDMutex       sync.RWMutex
	countWhereDestinationIDArgsForCall []struct {
		arg1 db.Transaction
		arg2 int
	}
	countWhereDestinationIDReturns struct {
		result1 int
		result2 error
	}
	countWhereDestinationIDReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	CountWhereGroupIDStub        func(db.Transaction, int) (int, error)
	countWhereGroupIDMutex       sync.RWMutex
	countWhereGroupIDArgsForCall []struct {
		arg1 db.Transaction
		arg2 int
	}
	countWhereGroupIDReturns struct {
		result1 int
		result2 error
	}
	countWhereGroupIDReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	CreateStub        func(db.Transaction, int, int) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 db.Transaction
		arg2 int
		arg3 int
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(db.Transaction, int, int) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 db.Transaction
		arg2 int
		arg3 int
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PolicyRepo) CountWhereDestinationID(arg1 db.Transaction, arg2 int) (int, error) {
	fake.countWhereDestinationIDMutex.Lock()
	ret, specificReturn := fake.countWhereDestinationIDReturnsOnCall[len(fake.countWhereDestinationIDArgsForCall)]
	fake.countWhereDestinationIDArgsForCall = append(fake.countWhereDestinationIDArgsForCall, struct {
		arg1 db.Transaction
		arg2 int
	}{arg1, arg2})
	stub := fake.CountWhereDestinationIDStub
	fakeReturns := fake.countWhereDestinationIDReturns
	fake.recordInvocation("CountWhereDestinationID", []interface{}{arg1, arg2})
	fake.countWhereDestinationIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *PolicyRepo) CountWhereDestinationIDCallCount() int {
	fake.countWhereDestinationIDMutex.RLock()
	defer fake.countWhereDestinationIDMutex.RUnlock()
	return len(fake.countWhereDestinationIDArgsForCall)
}

func (fake *PolicyRepo) CountWhereDestinationIDCalls(stub func(db.Transaction, int) (int, error)) {
	fake.countWhereDestinationIDMutex.Lock()
	defer fake.countWhereDestinationIDMutex.Unlock()
	fake.CountWhereDestinationIDStub = stub
}

func (fake *PolicyRepo) CountWhereDestinationIDArgsForCall(i int) (db.Transaction, int) {
	fake.countWhereDestinationIDMutex.RLock()
	defer fake.countWhereDestinationIDMutex.RUnlock()
	argsForCall := fake.countWhereDestinationIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *PolicyRepo) CountWhereDestinationIDReturns(result1 int, result2 error) {
	fake.countWhereDestinationIDMutex.Lock()
	defer fake.countWhereDestinationIDMutex.Unlock()
	fake.CountWhereDestinationIDStub = nil
	fake.countWhereDestinationIDReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *PolicyRepo) CountWhereDestinationIDReturnsOnCall(i int, result1 int, result2 error) {
	fake.countWhereDestinationIDMutex.Lock()
	defer fake.countWhereDestinationIDMutex.Unlock()
	fake.CountWhereDestinationIDStub = nil
	if fake.countWhereDestinationIDReturnsOnCall == nil {
		fake.countWhereDestinationIDReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.countWhereDestinationIDReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *PolicyRepo) CountWhereGroupID(arg1 db.Transaction, arg2 int) (int, error) {
	fake.countWhereGroupIDMutex.Lock()
	ret, specificReturn := fake.countWhereGroupIDReturnsOnCall[len(fake.countWhereGroupIDArgsForCall)]
	fake.countWhereGroupIDArgsForCall = append(fake.countWhereGroupIDArgsForCall, struct {
		arg1 db.Transaction
		arg2 int
	}{arg1, arg2})
	stub := fake.CountWhereGroupIDStub
	fakeReturns := fake.countWhereGroupIDReturns
	fake.recordInvocation("CountWhereGroupID", []interface{}{arg1, arg2})
	fake.countWhereGroupIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *PolicyRepo) CountWhereGroupIDCallCount() int {
	fake.countWhereGroupIDMutex.RLock()
	defer fake.countWhereGroupIDMutex.RUnlock()
	return len(fake.countWhereGroupIDArgsForCall)
}

func (fake *PolicyRepo) CountWhereGroupIDCalls(stub func(db.Transaction, int) (int, error)) {
	fake.countWhereGroupIDMutex.Lock()
	defer fake.countWhereGroupIDMutex.Unlock()
	fake.CountWhereGroupIDStub = stub
}

func (fake *PolicyRepo) CountWhereGroupIDArgsForCall(i int) (db.Transaction, int) {
	fake.countWhereGroupIDMutex.RLock()
	defer fake.countWhereGroupIDMutex.RUnlock()
	argsForCall := fake.countWhereGroupIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *PolicyRepo) CountWhereGroupIDReturns(result1 int, result2 error) {
	fake.countWhereGroupIDMutex.Lock()
	defer fake.countWhereGroupIDMutex.Unlock()
	fake.CountWhereGroupIDStub = nil
	fake.countWhereGroupIDReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *PolicyRepo) CountWhereGroupIDReturnsOnCall(i int, result1 int, result2 error) {
	fake.countWhereGroupIDMutex.Lock()
	defer fake.countWhereGroupIDMutex.Unlock()
	fake.CountWhereGroupIDStub = nil
	if fake.countWhereGroupIDReturnsOnCall == nil {
		fake.countWhereGroupIDReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.countWhereGroupIDReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *PolicyRepo) Create(arg1 db.Transaction, arg2 int, arg3 int) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 db.Transaction
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *PolicyRepo) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *PolicyRepo) CreateCalls(stub func(db.Transaction, int, int) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *PolicyRepo) CreateArgsForCall(i int) (db.Transaction, int, int) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *PolicyRepo) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *PolicyRepo) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *PolicyRepo) Delete(arg1 db.Transaction, arg2 int, arg3 int) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 db.Transaction
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2, arg3})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *PolicyRepo) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *PolicyRepo) DeleteCalls(stub func(db.Transaction, int, int) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *PolicyRepo) DeleteArgsForCall(i int) (db.Transaction, int, int) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *PolicyRepo) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *PolicyRepo) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *PolicyRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.countWhereDestinationIDMutex.RLock()
	defer fake.countWhereDestinationIDMutex.RUnlock()
	fake.countWhereGroupIDMutex.RLock()
	defer fake.countWhereGroupIDMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PolicyRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.PolicyRepo = new(PolicyRepo)
