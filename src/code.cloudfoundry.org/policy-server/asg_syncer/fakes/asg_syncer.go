// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/policy-server/asg_syncer"
)

type ASGSyncer struct {
	PollStub        func() error
	pollMutex       sync.RWMutex
	pollArgsForCall []struct {
	}
	pollReturns struct {
		result1 error
	}
	pollReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ASGSyncer) Poll() error {
	fake.pollMutex.Lock()
	ret, specificReturn := fake.pollReturnsOnCall[len(fake.pollArgsForCall)]
	fake.pollArgsForCall = append(fake.pollArgsForCall, struct {
	}{})
	stub := fake.PollStub
	fakeReturns := fake.pollReturns
	fake.recordInvocation("Poll", []interface{}{})
	fake.pollMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ASGSyncer) PollCallCount() int {
	fake.pollMutex.RLock()
	defer fake.pollMutex.RUnlock()
	return len(fake.pollArgsForCall)
}

func (fake *ASGSyncer) PollCalls(stub func() error) {
	fake.pollMutex.Lock()
	defer fake.pollMutex.Unlock()
	fake.PollStub = stub
}

func (fake *ASGSyncer) PollReturns(result1 error) {
	fake.pollMutex.Lock()
	defer fake.pollMutex.Unlock()
	fake.PollStub = nil
	fake.pollReturns = struct {
		result1 error
	}{result1}
}

func (fake *ASGSyncer) PollReturnsOnCall(i int, result1 error) {
	fake.pollMutex.Lock()
	defer fake.pollMutex.Unlock()
	fake.PollStub = nil
	if fake.pollReturnsOnCall == nil {
		fake.pollReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pollReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ASGSyncer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pollMutex.RLock()
	defer fake.pollMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ASGSyncer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ asg_syncer.ASGSync = new(ASGSyncer)
