// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type CCClient struct {
	GetLiveAppGUIDsStub        func(string, []string) (map[string]struct{}, error)
	getLiveAppGUIDsMutex       sync.RWMutex
	getLiveAppGUIDsArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	getLiveAppGUIDsReturns struct {
		result1 map[string]struct{}
		result2 error
	}
	getLiveAppGUIDsReturnsOnCall map[int]struct {
		result1 map[string]struct{}
		result2 error
	}
	GetLiveSpaceGUIDsStub        func(string, []string) (map[string]struct{}, error)
	getLiveSpaceGUIDsMutex       sync.RWMutex
	getLiveSpaceGUIDsArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	getLiveSpaceGUIDsReturns struct {
		result1 map[string]struct{}
		result2 error
	}
	getLiveSpaceGUIDsReturnsOnCall map[int]struct {
		result1 map[string]struct{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CCClient) GetLiveAppGUIDs(arg1 string, arg2 []string) (map[string]struct{}, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.getLiveAppGUIDsMutex.Lock()
	ret, specificReturn := fake.getLiveAppGUIDsReturnsOnCall[len(fake.getLiveAppGUIDsArgsForCall)]
	fake.getLiveAppGUIDsArgsForCall = append(fake.getLiveAppGUIDsArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2Copy})
	stub := fake.GetLiveAppGUIDsStub
	fakeReturns := fake.getLiveAppGUIDsReturns
	fake.recordInvocation("GetLiveAppGUIDs", []interface{}{arg1, arg2Copy})
	fake.getLiveAppGUIDsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CCClient) GetLiveAppGUIDsCallCount() int {
	fake.getLiveAppGUIDsMutex.RLock()
	defer fake.getLiveAppGUIDsMutex.RUnlock()
	return len(fake.getLiveAppGUIDsArgsForCall)
}

func (fake *CCClient) GetLiveAppGUIDsCalls(stub func(string, []string) (map[string]struct{}, error)) {
	fake.getLiveAppGUIDsMutex.Lock()
	defer fake.getLiveAppGUIDsMutex.Unlock()
	fake.GetLiveAppGUIDsStub = stub
}

func (fake *CCClient) GetLiveAppGUIDsArgsForCall(i int) (string, []string) {
	fake.getLiveAppGUIDsMutex.RLock()
	defer fake.getLiveAppGUIDsMutex.RUnlock()
	argsForCall := fake.getLiveAppGUIDsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CCClient) GetLiveAppGUIDsReturns(result1 map[string]struct{}, result2 error) {
	fake.getLiveAppGUIDsMutex.Lock()
	defer fake.getLiveAppGUIDsMutex.Unlock()
	fake.GetLiveAppGUIDsStub = nil
	fake.getLiveAppGUIDsReturns = struct {
		result1 map[string]struct{}
		result2 error
	}{result1, result2}
}

func (fake *CCClient) GetLiveAppGUIDsReturnsOnCall(i int, result1 map[string]struct{}, result2 error) {
	fake.getLiveAppGUIDsMutex.Lock()
	defer fake.getLiveAppGUIDsMutex.Unlock()
	fake.GetLiveAppGUIDsStub = nil
	if fake.getLiveAppGUIDsReturnsOnCall == nil {
		fake.getLiveAppGUIDsReturnsOnCall = make(map[int]struct {
			result1 map[string]struct{}
			result2 error
		})
	}
	fake.getLiveAppGUIDsReturnsOnCall[i] = struct {
		result1 map[string]struct{}
		result2 error
	}{result1, result2}
}

func (fake *CCClient) GetLiveSpaceGUIDs(arg1 string, arg2 []string) (map[string]struct{}, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.getLiveSpaceGUIDsMutex.Lock()
	ret, specificReturn := fake.getLiveSpaceGUIDsReturnsOnCall[len(fake.getLiveSpaceGUIDsArgsForCall)]
	fake.getLiveSpaceGUIDsArgsForCall = append(fake.getLiveSpaceGUIDsArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2Copy})
	stub := fake.GetLiveSpaceGUIDsStub
	fakeReturns := fake.getLiveSpaceGUIDsReturns
	fake.recordInvocation("GetLiveSpaceGUIDs", []interface{}{arg1, arg2Copy})
	fake.getLiveSpaceGUIDsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CCClient) GetLiveSpaceGUIDsCallCount() int {
	fake.getLiveSpaceGUIDsMutex.RLock()
	defer fake.getLiveSpaceGUIDsMutex.RUnlock()
	return len(fake.getLiveSpaceGUIDsArgsForCall)
}

func (fake *CCClient) GetLiveSpaceGUIDsCalls(stub func(string, []string) (map[string]struct{}, error)) {
	fake.getLiveSpaceGUIDsMutex.Lock()
	defer fake.getLiveSpaceGUIDsMutex.Unlock()
	fake.GetLiveSpaceGUIDsStub = stub
}

func (fake *CCClient) GetLiveSpaceGUIDsArgsForCall(i int) (string, []string) {
	fake.getLiveSpaceGUIDsMutex.RLock()
	defer fake.getLiveSpaceGUIDsMutex.RUnlock()
	argsForCall := fake.getLiveSpaceGUIDsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CCClient) GetLiveSpaceGUIDsReturns(result1 map[string]struct{}, result2 error) {
	fake.getLiveSpaceGUIDsMutex.Lock()
	defer fake.getLiveSpaceGUIDsMutex.Unlock()
	fake.GetLiveSpaceGUIDsStub = nil
	fake.getLiveSpaceGUIDsReturns = struct {
		result1 map[string]struct{}
		result2 error
	}{result1, result2}
}

func (fake *CCClient) GetLiveSpaceGUIDsReturnsOnCall(i int, result1 map[string]struct{}, result2 error) {
	fake.getLiveSpaceGUIDsMutex.Lock()
	defer fake.getLiveSpaceGUIDsMutex.Unlock()
	fake.GetLiveSpaceGUIDsStub = nil
	if fake.getLiveSpaceGUIDsReturnsOnCall == nil {
		fake.getLiveSpaceGUIDsReturnsOnCall = make(map[int]struct {
			result1 map[string]struct{}
			result2 error
		})
	}
	fake.getLiveSpaceGUIDsReturnsOnCall[i] = struct {
		result1 map[string]struct{}
		result2 error
	}{result1, result2}
}

func (fake *CCClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLiveAppGUIDsMutex.RLock()
	defer fake.getLiveAppGUIDsMutex.RUnlock()
	fake.getLiveSpaceGUIDsMutex.RLock()
	defer fake.getLiveSpaceGUIDsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CCClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
