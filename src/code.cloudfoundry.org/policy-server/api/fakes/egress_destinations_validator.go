// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/policy-server/api"
)

type EgressDestinationsValidator struct {
	ValidateEgressDestinationsStub        func([]api.EgressDestination) error
	validateEgressDestinationsMutex       sync.RWMutex
	validateEgressDestinationsArgsForCall []struct {
		arg1 []api.EgressDestination
	}
	validateEgressDestinationsReturns struct {
		result1 error
	}
	validateEgressDestinationsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EgressDestinationsValidator) ValidateEgressDestinations(arg1 []api.EgressDestination) error {
	var arg1Copy []api.EgressDestination
	if arg1 != nil {
		arg1Copy = make([]api.EgressDestination, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.validateEgressDestinationsMutex.Lock()
	ret, specificReturn := fake.validateEgressDestinationsReturnsOnCall[len(fake.validateEgressDestinationsArgsForCall)]
	fake.validateEgressDestinationsArgsForCall = append(fake.validateEgressDestinationsArgsForCall, struct {
		arg1 []api.EgressDestination
	}{arg1Copy})
	stub := fake.ValidateEgressDestinationsStub
	fakeReturns := fake.validateEgressDestinationsReturns
	fake.recordInvocation("ValidateEgressDestinations", []interface{}{arg1Copy})
	fake.validateEgressDestinationsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *EgressDestinationsValidator) ValidateEgressDestinationsCallCount() int {
	fake.validateEgressDestinationsMutex.RLock()
	defer fake.validateEgressDestinationsMutex.RUnlock()
	return len(fake.validateEgressDestinationsArgsForCall)
}

func (fake *EgressDestinationsValidator) ValidateEgressDestinationsCalls(stub func([]api.EgressDestination) error) {
	fake.validateEgressDestinationsMutex.Lock()
	defer fake.validateEgressDestinationsMutex.Unlock()
	fake.ValidateEgressDestinationsStub = stub
}

func (fake *EgressDestinationsValidator) ValidateEgressDestinationsArgsForCall(i int) []api.EgressDestination {
	fake.validateEgressDestinationsMutex.RLock()
	defer fake.validateEgressDestinationsMutex.RUnlock()
	argsForCall := fake.validateEgressDestinationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *EgressDestinationsValidator) ValidateEgressDestinationsReturns(result1 error) {
	fake.validateEgressDestinationsMutex.Lock()
	defer fake.validateEgressDestinationsMutex.Unlock()
	fake.ValidateEgressDestinationsStub = nil
	fake.validateEgressDestinationsReturns = struct {
		result1 error
	}{result1}
}

func (fake *EgressDestinationsValidator) ValidateEgressDestinationsReturnsOnCall(i int, result1 error) {
	fake.validateEgressDestinationsMutex.Lock()
	defer fake.validateEgressDestinationsMutex.Unlock()
	fake.ValidateEgressDestinationsStub = nil
	if fake.validateEgressDestinationsReturnsOnCall == nil {
		fake.validateEgressDestinationsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateEgressDestinationsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EgressDestinationsValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validateEgressDestinationsMutex.RLock()
	defer fake.validateEgressDestinationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EgressDestinationsValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
