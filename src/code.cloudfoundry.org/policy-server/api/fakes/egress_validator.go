// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/policy-server/api"
)

type EgressValidator struct {
	ValidateEgressPoliciesStub        func([]api.EgressPolicy) error
	validateEgressPoliciesMutex       sync.RWMutex
	validateEgressPoliciesArgsForCall []struct {
		arg1 []api.EgressPolicy
	}
	validateEgressPoliciesReturns struct {
		result1 error
	}
	validateEgressPoliciesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EgressValidator) ValidateEgressPolicies(arg1 []api.EgressPolicy) error {
	var arg1Copy []api.EgressPolicy
	if arg1 != nil {
		arg1Copy = make([]api.EgressPolicy, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.validateEgressPoliciesMutex.Lock()
	ret, specificReturn := fake.validateEgressPoliciesReturnsOnCall[len(fake.validateEgressPoliciesArgsForCall)]
	fake.validateEgressPoliciesArgsForCall = append(fake.validateEgressPoliciesArgsForCall, struct {
		arg1 []api.EgressPolicy
	}{arg1Copy})
	stub := fake.ValidateEgressPoliciesStub
	fakeReturns := fake.validateEgressPoliciesReturns
	fake.recordInvocation("ValidateEgressPolicies", []interface{}{arg1Copy})
	fake.validateEgressPoliciesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *EgressValidator) ValidateEgressPoliciesCallCount() int {
	fake.validateEgressPoliciesMutex.RLock()
	defer fake.validateEgressPoliciesMutex.RUnlock()
	return len(fake.validateEgressPoliciesArgsForCall)
}

func (fake *EgressValidator) ValidateEgressPoliciesCalls(stub func([]api.EgressPolicy) error) {
	fake.validateEgressPoliciesMutex.Lock()
	defer fake.validateEgressPoliciesMutex.Unlock()
	fake.ValidateEgressPoliciesStub = stub
}

func (fake *EgressValidator) ValidateEgressPoliciesArgsForCall(i int) []api.EgressPolicy {
	fake.validateEgressPoliciesMutex.RLock()
	defer fake.validateEgressPoliciesMutex.RUnlock()
	argsForCall := fake.validateEgressPoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *EgressValidator) ValidateEgressPoliciesReturns(result1 error) {
	fake.validateEgressPoliciesMutex.Lock()
	defer fake.validateEgressPoliciesMutex.Unlock()
	fake.ValidateEgressPoliciesStub = nil
	fake.validateEgressPoliciesReturns = struct {
		result1 error
	}{result1}
}

func (fake *EgressValidator) ValidateEgressPoliciesReturnsOnCall(i int, result1 error) {
	fake.validateEgressPoliciesMutex.Lock()
	defer fake.validateEgressPoliciesMutex.Unlock()
	fake.ValidateEgressPoliciesStub = nil
	if fake.validateEgressPoliciesReturnsOnCall == nil {
		fake.validateEgressPoliciesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateEgressPoliciesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EgressValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validateEgressPoliciesMutex.RLock()
	defer fake.validateEgressPoliciesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EgressValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
